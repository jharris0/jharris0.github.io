<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mostly About R</title>
    <link>/post/</link>
    <description>Recent content in Posts on Mostly About R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Jesse Harris</copyright>
    <lastBuildDate>Tue, 29 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Refreshing Data from an API in an R Shiny App</title>
      <link>/2017/08/29/refreshing-data-from-an-api-in-an-r-shiny-app/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/29/refreshing-data-from-an-api-in-an-r-shiny-app/</guid>
      <description>Posting this in case it helps others like me who are new to Shiny. I was working on a Shiny application with the following requirements:
When the application loads, pull source data from an API.Automatically refresh the data every x seconds or minutes thereafter.Also allow the user to refresh data manually via an actionButton.I was able to accomplish most of what I needed using these examples:</description>
    </item>
    
    <item>
      <title>Blogging Using blogdown</title>
      <link>/2017/08/29/blogging-using-blogdown/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/29/blogging-using-blogdown/</guid>
      <description>Some quick notes on how this blog was created…
It was built using the R blogdown package, which is based on the Hugo static site generator. To get started, I followed Kevin Wong’s excellent tutorial “Blogging with R Markdown”.
I decided to host the static site output on GitHub Pages. This should have been easy, but I made a bunch of mistakes along the way because I didn’t read carefully enough.</description>
    </item>
    
  </channel>
</rss>